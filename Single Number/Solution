Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.


Solution:-
int singleNumber(int* nums, int numsSize) {
    int result = 0;

   
    for (int i = 0; i < numsSize; i++) {
        result ^= nums[i];
    }

    return result;
}


Solution 2:-
int singleNumber(int* nums, int numsSize) {
    int unique = 0;
    int i = 1;

    while (i < numsSize) {
        if (nums[unique] == nums[i]) {
            unique = unique + i + 1;
            i = unique + 1; 
        } else {
            i++;
        }
    }

    return nums[unique];
}

