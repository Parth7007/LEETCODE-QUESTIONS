You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 

Constraints:

1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.


Solution:-
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* plusOne(int* digits, int digitsSize, int* returnSize) {
    int len = digitsSize;

    // Create a new array to store the modified digits
    int* result = (int*)malloc(len * sizeof(int));
    if (result == NULL) {
        // Handle memory allocation failure
        *returnSize = 0;
        return NULL;
    }

    // Copy the original digits to the result array
    memcpy(result, digits, len * sizeof(int));

    for (int i = len - 1; i >= 0; i--) {
        // Increment the current digit and check for carry
        result[i]++;
        if (result[i] < 10) {
            break;  // No carry, stop here
        } else {
            // Carry, set current digit to 0 and continue to the next digit
            result[i] = 0;
        }
    }

    // Check if there's a carry in the most significant digit
    if (result[0] == 0) {
        // Need to increase the array size and set the first digit to 1
        int* newResult = (int*)malloc((len + 1) * sizeof(int));
        if (newResult == NULL) {
            // Handle memory allocation failure
            free(result);
            *returnSize = 0;
            return NULL;
        }
        newResult[0] = 1;
        memcpy(newResult + 1, result, len * sizeof(int));
        free(result);
        result = newResult;
        len++;
    }

    *returnSize = len;
    return result;
}

